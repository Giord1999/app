#These code snippets are ideas to add functionalities
#My main purpose is to integrate those functionalities both in the loan_analyst.py (backend part) and in the loan_app.py (front end part)
#In addition I want to desing a "Ribbon" interface 
#In the "assets" folder there are the icons that I use (and I will use) in my app


Idea 1: #TODO: Other amortization methods:
        (da inserire nel metodo "loan_table")
        # Ammortamento tedesco: rate costanti anticipate (come l'ammortamento francese), con interessi pagati anticipatamente.
        # Questo vuol dire che la prima rata è costituita dai soli interessi (differenza con l'ammortamento francese), mentre le altre sono costanti
        In sintesi:
         - Quota interessi: I_{k} (Quota interessi) = D_{k}di = ((n-k)/n)*(S*d)
         - Rata iniziale: R_{k} (Rata iniziale costituita dalla sola quota interessi) = S*d
         - Rata costante: R_{k} (Rata costante successiva alla prima) = (n-k)*(S/n)*d + S/n, per k fino a n-1
         - Rata finale: R_{k} (Rata finale) = S/n


        #Ammortamento americano (a due tassi)

        ..... (Logica dell'ammortamento francese)

        ------(Logica dell'ammortamento italiano)


        elif self.amortization_type == "German":
            interest = [self.loan_amount * self.rate for _ in range(self.periods)]
            principal = [(self.loan_amount / self.periods) for _ in range(self.periods)]
            balance = [self.loan_amount - sum(principal[:i]) for i in range(1, self.periods + 1)]

            table = pd.DataFrame({
                'Initial Debt': [self.loan_amount] + balance[:-1],
                'Payment': [interest[i] + principal[i] for i in range(self.periods)],
                'Interest': interest,
                'Principal': principal,
                'Balance': balance
            }, index=pd.to_datetime(periods))


        elif self.amortization_type == "American":
            # Calcoliamo gli interessi periodici
            interest = [self.loan_amount * self.rate for _ in range(self.periods)]
            # Nessun pagamento di capitale fino all'ultima rata
            principal = [0] * (self.periods - 1) + [self.loan_amount]
            # Le rate di pagamento sono costituite dagli interessi, tranne l'ultima che include il capitale
            payment = interest[:-1] + [interest[-1] + self.loan_amount]
            # Il bilancio diminuisce solo con il pagamento finale del capitale
            balance = [self.loan_amount] * (self.periods - 1) + [0]

            # Calcoliamo il tasso di rendimento richiesto per il fondo di ammortamento
            investment_rate = self.calculate_investment_rate()

            table = pd.DataFrame({
                'Initial Debt': [self.loan_amount] + balance[:-1],
                'Payment': payment,
                'Interest': interest,
                'Principal': principal,
                'Balance': balance,
                'Investment Rate': [investment_rate] * self.periods
            }, index=pd.to_datetime(periods))


        Il resto del codice della tabella di ammortamento rimane uguale


Idea 2 #TODO: Inserire supporto per altre valute (Dollaro americano, dollaro canadese, dollaro australiano, sterlina britannica, yen giapponese)

Idea 3 #TODO: Consentire di far scegliere all’utente dove salvare il database, i report e i file con i dati esportati
Idea 4 #TODO: Implementare queste funzionalità sia nel backend che nella GUI
Idea 5 #TODO: Fare in modo che si possano eseguire più attività in contemporanea su più prestiti in contemporanea. In pratica vorrei che. Mantenendo la possibilità di eseguire singole operazioni su prestiti singoli, si possano eseguire più operazioni su più prestiti. 
        
Idea 6 #TODO: Supportare i mutui a tasso variabile (questo è un 'must have' per un loan analyst serio)

Problemi:
 1) Come implementare la logica dei mutui a tasso variabile nel piano di ammortamento (difficilmente risolvibile)
 2) Dove trovare i dati dei tassi variabili (Problema risolvibile con del sano web scraping)


Code Idea per supportare i mutui a tasso variabile

import requests
from bs4 import BeautifulSoup

class Loan:
    loans = []
    db_directory = os.getcwd()  # Default to the current working directory
    
    def __init__(self, rate, term, loan_amount, amortization_type, frequency, rate_type='fixed', use_euribor=False, update_frequency='monthly', downpayment_percent=0, additional_costs=None, periodic_expenses=None, start=dt.date.today().isoformat(), loan_id=None):
        self.loan_id = loan_id or str(uuid.uuid4())
        self.initial_rate = rate 
        self.initial_term = term
        self.loan_amount = loan_amount
        self.downpayment_percent = downpayment_percent
        self.downpayment = self.loan_amount * (self.downpayment_percent / 100)
        self.loan_amount -= self.downpayment
        self.start = dt.datetime.fromisoformat(start).replace(day=1)
        self.frequency = frequency
        self.rate_type = rate_type
        self.use_euribor = use_euribor
        self.update_frequency = update_frequency
        self.periods = self.calculate_periods()
        self.euribor_rates = self.get_euribor_rates() if self.use_euribor else {}
        self.rate = self.calculate_rate()
        self.pmt = abs(npf.pmt(self.rate, self.periods, self.loan_amount))
        self.pmt_str = f"€ {self.pmt:,.2f}"
        self.amortization_type = amortization_type
        self.additional_costs = additional_costs or {}
        self.periodic_expenses = periodic_expenses or {}
        self.taeg = {}
        self.table = self.loan_table()
        self.active = False
        Loan.loans.append(self)

    def get_euribor_rates(self):
        url = 'https://www.euribor-rates.eu/en/'
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        
        rates = {}
        rate_elements = soup.find_all('div', class_='rate')
        for rate_element in rate_elements:
            rate_text = rate_element.text.strip()
            if '1 month' in rate_text:
                rates['1m'] = float(rate_text.replace('1 month', '').replace('%', '').strip()) / 100
            elif '3 months' in rate_text:
                rates['3m'] = float(rate_text.replace('3 months', '').replace('%', '').strip()) / 100
            elif '6 months' in rate_text:
                rates['6m'] = float(rate_text.replace('6 months', '').replace('%', '').strip()) / 100
            elif '12 months' in rate_text:
                rates['12m'] = float(rate_text.replace('12 months', '').replace('%', '').strip()) / 100
        
        return rates

    def calculate_periods(self):
        if self.frequency == 'monthly':
            return self.initial_term * 12
        elif self.frequency == 'quarterly':
            return self.initial_term * 4
        elif self.frequency == 'semi-annual':
            return self.initial_term * 2
        elif self.frequency == 'annual':
            return self.initial_term
        else:
            raise ValueError("Unsupported frequency")

    def calculate_rate(self):
        if self.rate_type == 'fixed':
            if self.frequency == 'monthly':
                return self.initial_rate / 12
            elif self.frequency == 'quarterly':
                return self.initial_rate / 4
            elif self.frequency == 'semi-annual':
                return self.initial_rate / 2
            elif self.frequency == 'annual':
                return self.initial_rate
            else:
                raise ValueError("Unsupported frequency")
        elif self.rate_type == 'variable':
            if self.use_euribor:
                if self.update_frequency == 'monthly':
                    euribor_rate = self.euribor_rates.get('1m', self.initial_rate)
                elif self.update_frequency == 'quarterly':
                    euribor_rate = self.euribor_rates.get('3m', self.initial_rate)
                elif self.update_frequency == 'semi-annual':
                    euribor_rate = self.euribor_rates.get('6m', self.initial_rate)
                elif self.update_frequency == 'annual':
                    euribor_rate = self.euribor_rates.get('12m', self.initial_rate)
                else:
                    raise ValueError("Unsupported update frequency")
                return euribor_rate / 12  # Assuming monthly updates for variable rate
            else:
                return self.initial_rate / 12  # Assuming monthly updates for variable rate
        else:
            raise ValueError("Unsupported rate type")

    def loan_table(self):
        if self.frequency == 'monthly':
            periods = [self.start + relativedelta(months=x) for x in range(self.periods)]
        elif self.frequency == 'quarterly':
            periods = [self.start + relativedelta(months=3 * x) for x in range(self.periods)]
        elif self.frequency == 'semi-annual':
            periods = [self.start + relativedelta(months=6 * x) for x in range(self.periods)]
        elif self.frequency == 'annual':
            periods = [self.start + relativedelta(years=x) for x in range(self.periods)]
        else:
            raise ValueError("Unsupported frequency")

        if self.amortization_type == "French":
            interest = [npf.ipmt(self.rate, month, self.periods, -self.loan_amount, when="end")
                        for month in range(1, self.periods + 1)]
            principal = [npf.ppmt(self.rate, month, self.periods, -self.loan_amount)
                        for month in range(1, self.periods + 1)]
            balance = [self.loan_amount - sum(principal[:x]) for x in range(1, self.periods + 1)]
            table = pd.DataFrame({
                'Initial Debt': [self.loan_amount] + balance[:-1],
                'Payment': [self.pmt] * self.periods,
                'Interest': interest,
                'Principal': principal,
                'Balance': balance
            }, index=pd.to_datetime(periods))

        elif self.amortization_type == "Italian":
            principal_payment = self.loan_amount / self.periods
            interest = [(self.loan_amount - principal_payment * x) * self.rate for x in range(self.periods)]
            principal = [principal_payment] * self.periods
            payment = [interest[x] + principal[x] for x in range(self.periods)]
            balance = [self.loan_amount - sum(principal[:x+1]) for x in range(self.periods)]

            table = pd.DataFrame({
                'Initial Debt': [self.loan_amount] + balance[:-1],
                'Payment': payment,
                'Interest': interest,
                'Principal': principal,
                'Balance': balance
            }, index=pd.to_datetime(periods))

        else:
            raise ValueError("Unsupported amortization type")

        return table.round(2)

    def update_variable_rate(self):
        """Update the variable rate based on the latest EURIBOR rate and recalculate the payment and loan table."""
        if self.rate_type == 'variable' and self.use_euribor:
            self.euribor_rates = self.get_euribor_rates()
            self.rate = self.calculate_rate()
            self.pmt = abs(npf.pmt(self.rate, self.periods, self.loan_amount))
            self.pmt_str = f"€ {self.pmt:,.2f}"
            self.table = self.loan_table()
        else:
            raise ValueError("Cannot update rate for fixed rate loans or non-EURIBOR variable rate loans")

    # Rest of the class methods remain unchanged

 
Idea 7: #TODO: Aggiungere dei metodi per della sana risk analysis

    @classmethod
    def simulate_probabilistic_pricing(self, p1_default=0.2, pn_default=0.4, Decay_default=0.9, r_recovery=0.4, 
                                       interest_rates=(0.3, 0.4), interest_rate_step=0.05,
                                       loan_terms=(5, 20), loan_term_step=5,
                                       iterations=1000, perspective='lender'):
        """
        Simula l'IRR atteso per una serie di tassi di interesse e durate del prestito, considerando i rischi di default e recupero.
        
        Parametri:
        - p1_default (float): Probabilità di default nel primo anno.
        - pn_default (float): Probabilità di default nell'ultimo anno.
        - Decay_default (float): Tasso di decadimento della probabilità di default ogni anno.
        - r_recovery (float): Tasso di recupero in caso di default.
        - interest_rates (tuple): Una tupla di (min_rate, max_rate) per i tassi di interesse.
        - interest_rate_step (float): L'incremento dei tassi di interesse.
        - loan_terms (tuple): Una tupla di (min_term, max_term) per le durate dei prestiti in anni.
        - loan_term_step (int): L'incremento delle durate del prestito.
        - iterations (int): Numero di iterazioni Monte Carlo per la simulazione.
        - perspective (str): 'lender' o 'borrower', influenza i segni dei flussi di cassa.
        
        Ritorna:
        - Un DataFrame contenente gli IRR simulati per ogni combinazione di tasso di interesse e durata del prestito.
        """
        rate_range = np.arange(interest_rates[0], interest_rates[1] + interest_rate_step, interest_rate_step)
        term_range = np.arange(loan_terms[0], loan_terms[1] + loan_term_step, loan_term_step)

        results = []
        
        for rate in tqdm(rate_range):
            for term in term_range:
                irrs = []

                for _ in range(iterations):
                    cash_flows = []
                    default_occurred = False

                    # Simula i flussi di cassa annuali
                    for year in range(1, term + 1):
                        if year == 1:
                            p_default = p1_default
                        elif year == term:
                            p_default = pn_default
                        else:
                            p_default = p_default * Decay_default

                        if not default_occurred and np.random.rand() < p_default:
                            default_occurred = True
                            cash_flows.append(0)  # Anno del default
                            cash_flows.append(0)  # Anno successivo al default
                            cash_flows.append(self.loan_amount * r_recovery)  # Recupero dopo 2 anni
                            break
                        else:
                            payment = self.loan_amount * rate
                            if perspective == 'lender':
                                cash_flows.append(-payment)
                            else:  # Borrower
                                cash_flows.append(payment)

                    # Rimborso finale del capitale se non c'è default
                    if not default_occurred:
                        if perspective == 'lender':
                            cash_flows[-1] -= self.loan_amount
                        else:
                            cash_flows[-1] += self.loan_amount

                    # Primo flusso di cassa: negativo per il prestatore, positivo per il mutuatario
                    initial_cash_flow = -self.loan_amount if perspective == 'lender' else self.loan_amount
                    cash_flows.insert(0, initial_cash_flow)

                    # Calcola l'IRR per i flussi di cassa simulati
                    irr = npf.irr(cash_flows)
                    irrs.append(irr)

                expected_irr = np.mean(irrs)
                results.append({'Rate': rate, 'Term': term, 'Expected IRR': expected_irr})

        df = pd.DataFrame(results)
        return df
    
    def plot_irrs(self, df):
        """
        Crea un grafico interattivo per i valori IRR.
        """
        fig = px.scatter(df, x='Rate', y='Term', color='Expected IRR', 
                         hover_data=['Expected IRR'], title="IRR Simulation Results")
        fig.update_traces(marker=dict(size=12, line=dict(width=2, color='DarkSlateGrey')))
        fig.show()

    def heatmap_sensitivity(self, df, variable):
        """
        Crea una heatmap interattiva per visualizzare la sensibilità dell'IRR rispetto a una variabile.
        """
        fig = px.density_heatmap(df, x='Rate', y='Term', z=variable, 
                                 title=f"Sensitivity Analysis of {variable}",
                                 histfunc='avg', nbinsx=20, nbinsy=20)
        fig.update_layout(autosize=True, xaxis_title='Interest Rate', yaxis_title='Loan Term')
        fig.show()

    def optimize_loan(self, p1_default=0.2, pn_default=0.4, Decay_default=0.9, r_recovery=0.4, 
                      iterations=1000):
        """
        Ottimizza i parametri del prestito per massimizzare l'IRR atteso per il prestatore e minimizzare
        l'IRR atteso per il mutuatario, trovando un equilibrio tra i due.

        Parametri:
        - p1_default (float): Probabilità di default nel primo anno.
        - pn_default (float): Probabilità di default nell'ultimo anno.
        - Decay_default (float): Tasso di decadimento della probabilità di default ogni anno.
        - r_recovery (float): Tasso di recupero in caso di default.
        - iterations (int): Numero di iterazioni Monte Carlo per la simulazione.

        Ritorna:
        - Un dizionario con i parametri ottimali e di equilibrio (tasso, durata, IRR) per prestatore e mutuatario.
        """
        
        def objective_lender(params):
            rate, term = params
            df = self.simulate_probabilistic_pricing(p1_default=p1_default, pn_default=pn_default, 
                                                     Decay_default=Decay_default, r_recovery=r_recovery, 
                                                     interest_rates=(rate, rate), loan_terms=(term, term),
                                                     iterations=iterations, perspective='lender')
            return -df['Expected IRR'].iloc[0]  # Minimizza l'IRR negativo (massimizza l'IRR positivo per il lender)

        def objective_borrower(params):
            rate, term = params
            df = self.simulate_probabilistic_pricing(p1_default=p1_default, pn_default=pn_default, 
                                                     Decay_default=Decay_default, r_recovery=r_recovery, 
                                                     interest_rates=(rate, rate), loan_terms=(term, term),
                                                     iterations=iterations, perspective='borrower')
            return df['Expected IRR'].iloc[0]  # Minimizza l'IRR positivo (massimizza l'IRR negativo per il borrower)
        
        bounds = [(0.01, 0.5), (1, 30)]  # Limiti per tasso di interesse e durata del prestito

        # Ottimizzazione per il prestatore (lender)
        result_lender = differential_evolution(objective_lender, bounds)
        optimized_rate_lender, optimized_term_lender = result_lender.x
        optimized_irr_lender = -result_lender.fun

        # Ottimizzazione per il mutuatario (borrower)
        result_borrower = differential_evolution(objective_borrower, bounds)
        optimized_rate_borrower, optimized_term_borrower = result_borrower.x
        optimized_irr_borrower = result_borrower.fun

        # Calcolo del punto di equilibrio
        equilibrium_rate = (optimized_rate_lender + optimized_rate_borrower) / 2
        equilibrium_term = (optimized_term_lender + optimized_term_borrower) / 2

        df_lender = self.simulate_probabilistic_pricing(p1_default=p1_default, pn_default=pn_default, 
                                                        Decay_default=Decay_default, r_recovery=r_recovery, 
                                                        interest_rates=(equilibrium_rate, equilibrium_rate), 
                                                        loan_terms=(equilibrium_term, equilibrium_term),
                                                        iterations=iterations, perspective='lender')
        df_borrower = self.simulate_probabilistic_pricing(p1_default=p1_default, pn_default=pn_default, 
                                                          Decay_default=Decay_default, r_recovery=r_recovery, 
                                                          interest_rates=(equilibrium_rate, equilibrium_rate), 
                                                          loan_terms=(equilibrium_term, equilibrium_term),
                                                          iterations=iterations, perspective='borrower')
        
        equilibrium_irr_lender = df_lender['Expected IRR'].iloc[0]
        equilibrium_irr_borrower = df_borrower['Expected IRR'].iloc[0]

        return {
            'Lender Optimized Rate': optimized_rate_lender,
            'Lender Optimized Term': optimized_term_lender,
            'Lender Expected IRR': optimized_irr_lender,
            'Borrower Optimized Rate': optimized_rate_borrower,
            'Borrower Optimized Term': optimized_term_borrower,
            'Borrower Expected IRR': optimized_irr_borrower,
            'Equilibrium Rate': equilibrium_rate,
            'Equilibrium Term': equilibrium term,
            'Equilibrium IRR Lender': equilibrium_irr_lender,
            'Equilibrium IRR Borrower': equilibrium_irr_borrower
        }


Idea 8 #TODO: Aggiungere delle funzioni per la reportistica
    @classmethod
    def generate_report(self, output_directory=None, filename='loan_report'):
        """
        Genera un report dettagliato in formato HTML e PDF che copre tutti gli aspetti del prestito.
        
        Parametri:
        - output_directory (str): Directory dove salvare il report. Se None, utilizza una directory predefinita 'reports'.
        - filename (str): Nome del file di output senza estensione.
        
        Ritorna:
        - Percorsi del file HTML e PDF generati.
        """
        # 1. Se non è specificata una directory di output, usa la directory predefinita
        if output_directory is None:
            output_directory = 'reports'
        
        # 2. Creazione della directory di output se non esiste
        if not os.path.exists(output_directory):
            os.makedirs(output_directory)

        # 3. Riassunto del prestito
        summary_text = f"""
        <h2>Loan Summary</h2>
        <p>Loan Amount: €{self.loan_amount:,.2f}</p>
        <p>Interest Rate: {self.initial_rate * 100:.2f}%</p>
        <p>Term: {self.initial_term} years</p>
        <p>Payment: {self.pmt_str}</p>
        <p>Downpayment: €{self.downpayment:,.2f} ({self.downpayment_percent}%)</p>
        <p>Start Date: {self.start.strftime('%Y-%m-%d')}</p>
        <p>Amortization Type: {self.amortization_type}</p>
        """

        # 4. Tabella di ammortamento
        amortization_table_html = self.table.to_html(classes='table table-striped', float_format="€{:,.2f}".format)

        # 5. Grafico del Balance vs Interest
        self.plot_balances()
        balance_vs_interest_graph_path = os.path.join(output_directory, 'balance_vs_interest.png')
        plt.savefig(balance_vs_interest_graph_path)
        plt.close()

        # 6. Risultati del probabilistic loan pricing
        pricing_results = self.simulate_probabilistic_pricing()
        pricing_results_html = pricing_results.to_html(classes='table table-striped', float_format="{:,.2f}%".format)
        
        # 7. Generazione del contenuto del report
        env = Environment(loader=FileSystemLoader('.'))
        template = env.get_template('report_template.html')

        # 8. Popolazione del template con i dati
        html_out = template.render(summary_text=summary_text,
                                   amortization_table=amortization_table_html,
                                   balance_vs_interest_graph=balance_vs_interest_graph_path,
                                   pricing_results=pricing_results_html)

        # 9. Salvare il report in HTML
        html_file_path = os.path.join(output_directory, f'{filename}.html')
        with open(html_file_path, 'w') as f:
            f.write(html_out)

        # 10. Conversione del report HTML in PDF
        pdf_file_path = os.path.join(output_directory, f'{filename}.pdf')
        weasyprint.HTML(html_file_path).write_pdf(pdf_file_path)

        return html_file_path, pdf_file_path


Idea 9: #TODO: Devi rendere possibile per l'utente di scegliere la directory in cui salvare i file (report, database etc...) che vengono creati

Idea 10: #TODO: Inserisci un metodo per redigere in automatico le scritture contabili